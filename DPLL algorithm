{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before you turn in this assignment, make sure everything runs as expected. First, **restart the kernel** (in the menubar, select Kernel$\\rightarrow$Restart) and then run the test cells for each of the questions you have answered.  Note that a grade of 3 for the related LOs requires all tests in the \"Basic Functionality\" section to be passed.  The test cells pass if they execute with no errors (i.e. all the assertions are passed).\n",
    "\n",
    "Make sure you fill in any place that says `YOUR CODE HERE`.  Be sure to remove the `raise NotImplementedError()` statements as you implement your code - these are simply there as a reminder if you forget to add code where it's needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "69f9950e2c060ad5c3cc41d2c78fa636",
     "grade": false,
     "grade_id": "cell-36d7173cbd11c12a",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<h1>CS152 Assignment 2: The DPLL Algorithm</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "7947006e03ad4d3e0b5469c4ddf997f0",
     "grade": false,
     "grade_id": "cell-8ec27aa9925ffc86",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<h1>Question 1</h1>\n",
    "\n",
    "Define your <code>Literal</code> class below.  Ensure that you define a <code>name</code> and <code>sign</code> attribute as required in the assignment description.  In addition, include any other attributes and member functions as needed. You will need to overload <code>__neg__()</code> to correctly handle negated literals.  You may need to overload <code>__eq__()</code> and <code>__hash__()</code> also."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "6f3dcb95b91cd3b0f526b89f339b3fe9",
     "grade": false,
     "grade_id": "cell-575ae3fbbe1ccbf6",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "class Literal:\n",
    "    \n",
    "    \"\"\"Class Literal: Provides a structure for representing the literals when \n",
    "    performing a DPLL algorithm.\"\"\"\n",
    "    \n",
    "    def __init__(self, name, sign=True):\n",
    "        self.name = name #name of the literal \n",
    "        self.sign = sign #sign property \n",
    "        \n",
    "    def __neg__(self):\n",
    "        \"\"\"Handles negated literals.\"\"\"\n",
    "        \n",
    "        return Literal(self.name, not self.sign)\n",
    "    \n",
    "    def __repr__(self):\n",
    "        \"\"\"For better representation of the literals and for easier debugging.\"\"\"\n",
    "        sign = '' if self.sign else '-'\n",
    "        return sign + self.name\n",
    "\n",
    "    def __eq__(self, other): \n",
    "        \"\"\"Compares objects and checks for equality.\"\"\"\n",
    "        return self.name == other.name\n",
    "    \n",
    "    def __str__(self): \n",
    "        \"\"\"Printable string representation of the object.\"\"\"\n",
    "        return \"-\" + self.name if not self.sign else self.name\n",
    "    \n",
    "    def __hash__(self): \n",
    "        \"\"\"Returns the hash value of an object.\"\"\"\n",
    "        return hash(self.name)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "7e6af6a3602f2712265baf6d3ce930f4",
     "grade": false,
     "grade_id": "cell-5df02e9e3f9998b4",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<h1>Question 2</h1>\n",
    "Implement DPLL by filling in the stubs below.  Note that the various heuristics are not required to be implemented for basic functionality, but a template has been provided for you to do so if you attempt the extension questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "DPLL is an algorithm used for checking propositional logic formulae given in the conjunctive normal form (CNF) for satisfiability (i.e., whether there exists a model where all of the clauses in the knowledge base (KB) are true). It takes as input a sentence in CNF (i.e., a set of clauses) and recursively enumerates all possible models in a depth-first manner. \n",
    "\n",
    "Below is the implementation of the DPLL algorithm. It is simplified compared to the version in the book's pseudo-code, but it still works.\n",
    "\n",
    "Almost every step is explained in the code comments, but in short, for no heuristic version, my implementation randomly chooses a symbol from the set of unique symbols present in the KB and creates two branch models with that symbol being assigned True and False. Then, the algorithm checks whether there are the same signed symbols present in each of the clauses of the KB, and if that is true for the clause, an arbitrary `Pass` symbol is added. This branching of different symbols truth-value assignment continues unless the model turns out to have all clauses being True or the algorithm finds all symbols in the current model present in one of the clauses but with different signs. If that happens, this means that one clause is automatically False, and hence, the algorithm stops and gives False for that model. The search continues with different models, and if it happens that all clauses are True (i.e., if they contain the `Pass` symbol), it automatically returns True, the model itself, and the symbols chosen. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4ddf2e140725e3b8a6048c92bac9580c",
     "grade": false,
     "grade_id": "cell-2846b43cfaf88026",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "from copy import * #library needed for implementing the DPLL function\n",
    "\n",
    "def DPLL_Satisfiable(KB, heuristic_level=0):\n",
    "    \n",
    "    \"\"\" satisfiable, model = DPLLSatisfiable(KB)\n",
    "        Takes in a KB and returns whether the KB is satisfiable, and the model that makes it so.\n",
    "        \n",
    "        Input:\n",
    "            -KB: A knowledge base of clauses (CNF) consisting of a list of sets of literals.  A KB might look like\n",
    "            [{A,B},{-A,C,D}].\n",
    "            -heuristic_level: An integer that will be passed in to specify which heuristics to implement \n",
    "            (only for the extension activities).\n",
    "        \n",
    "        Output:\n",
    "            -satisfiable: Returns True if the KB is satisfiable, or False otherwise.\n",
    "            -model: A dictionary that assigns a truth value to each literal for the model that satisfies KB.\n",
    "            For example, a model might look like {A: True, B: False}. If there are free variables, it doesn't show them \n",
    "            in  the model in the first place, so in the above example, we assume that C, D, E, and F are free.\n",
    "            -model_keys: Returns a symbol trace for the given method. \"\"\"\n",
    "    \n",
    "    #a list for saving the trace \n",
    "    global model_keys\n",
    "    model_keys = []\n",
    "\n",
    "    #this Pass symbol is needed to see whether any of the symbols for the given model are true, which will then help\n",
    "    #identify that the whole clause is true and based on the presence of Pass, we could see whether all clauses are true\n",
    "    #given some specific model since we are dealing with CNF and disjunctions within them\n",
    "    Pass = Literal('Pass')\n",
    "    \n",
    "    #creating a set of literals \n",
    "    #adding all the KB literals into the set (only unique ones without repetition)\n",
    "    symbols = set() \n",
    "    for clause in KB:\n",
    "        for literal in clause:\n",
    "            symbols.add(literal)\n",
    "\n",
    "    def DPLL(clauses, new_clauses, symbols, model, model_keys):\n",
    "        \n",
    "        #iterating over the literals in each of the clause in the KB\n",
    "        for cl, clause in enumerate(clauses, 0):\n",
    "            count = 0 \n",
    "            #only run for the clauses which are not true yet, because it is enough to find one True literal to make the \n",
    "            #disjunction True\n",
    "            if not Pass in clause:\n",
    "                for literal in clause:\n",
    "                    #if the literal we are setting to some boolean value in the model is in the clause, then keep \n",
    "                    #count of how many literals match\n",
    "                    if literal.name in model:\n",
    "                        count += 1\n",
    "                        #if the signs of these matched literals are the same, then it means that the whole clause is True\n",
    "                        #since we are dealing with disjunctions and if one literal out of the clause is True, then the whole \n",
    "                        #clause is True, which is why we add a P symbol (True Clause) to help us know which clauses are True\n",
    "                        if literal.sign == model[literal.name]:\n",
    "                            clause.add(Pass)\n",
    "                            #this is needed for the implementation of the heuristics, where the clauses are updated\n",
    "                            new_clauses[cl].add(Pass)\n",
    "                            break  \n",
    "                        #for the heuristic implementation, we discard the literals of the wrong sign since we know they are false \n",
    "                        #for the model; if all literals are discarded, the model is False since the clause is False\n",
    "                        elif literal.sign != model[literal.name]:\n",
    "                            if literal in new_clauses[cl]:\n",
    "                                new_clauses[cl].remove(literal)\n",
    "                                if new_clauses[cl]==set():\n",
    "                                    return False, {}, []\n",
    "                        #if all of the literals in the clauses are already in the model but their signs don't match, \n",
    "                        #then it means that all literals in the clause are False and the model is False\n",
    "                            if count == len(clause):\n",
    "                                return False, {}, []\n",
    "        \n",
    "        #if all clauses are true, then this model is True and KB satisfiable, since all of the clauses have at least\n",
    "        #one literal which converged to True as seen by the presence of P\n",
    "        if all([Pass in clause for clause in clauses]):\n",
    "            change={}\n",
    "            new={}\n",
    "            for literals in model:\n",
    "                change[literals]=Literal(literals, model[literals])\n",
    "            for literal in model:\n",
    "                new[change[literal]]=change[literal].sign\n",
    "            return True, new, model_keys\n",
    "         \n",
    "        #updating the clauses\n",
    "        #I couldn't just update the clauses directly because the set sizes would have changed \n",
    "        #within the loops, so I used a new list where the True clauses are deleted and the wrong sign \n",
    "        #literals are discarded from the clauses\n",
    "        clauses = [clause for clause in clauses if not Pass in clause]\n",
    "        new_clauses = [clause for clause in new_clauses if not Pass in clause]\n",
    "        \n",
    "        if heuristic_level == 0 :\n",
    "            #choose an arbitrary literal from a set of unique literals\n",
    "            choice = symbols.pop()\n",
    "        if heuristic_level == 1:\n",
    "            #choose the most common literal among the leftover clauses\n",
    "            choice = degree(symbols, new_clauses)\n",
    "            symbols.remove(choice)\n",
    "        if heuristic_level == 2:\n",
    "            #choose the pure literal; if none, choose unit clause literal; if none, choose the most common literal\n",
    "            #among leftover clauses; if multiple, choose alphabetically \n",
    "            choice = pure_unit(new_clauses,symbols)\n",
    "            symbols.remove(choice)\n",
    "        if heuristic_level == 3:\n",
    "            #choose the pure literal; if none, choose unit clause literal; if none, choose the most common literal\n",
    "            #among leftover clauses; if multiple, choose the most common\n",
    "            choice = pure_unit(new_clauses,symbols,common=True)\n",
    "            symbols.remove(choice)\n",
    "        \n",
    "        #the symbol trace for the methods    \n",
    "        model_keys.append(choice)\n",
    "        \n",
    "        #since we are working with recursion, we use deep copy to construct a new compound object (i.e., model object) \n",
    "        #and then recursively insert copies into it of the objects found in the original \n",
    "        model1, model2 = deepcopy(model), deepcopy(model)\n",
    "        #making two possible models for the literal - True or False\n",
    "        model1[choice.name], model2[choice.name] = True, False\n",
    "                \n",
    "        #recursively calling DPLL to test satisfiability \n",
    "        satisfiable, Model, model_keys1 = DPLL(deepcopy(clauses), deepcopy(new_clauses), deepcopy(symbols), model1, model_keys)\n",
    "        #returning the output if the model turned out to be true\n",
    "        if satisfiable:\n",
    "            return satisfiable, Model, model_keys1\n",
    "                \n",
    "        #doing the same thing as above but for another version \n",
    "        satisfiable, Model, model_keys1 = DPLL(deepcopy(clauses), deepcopy(new_clauses), deepcopy(symbols), model2, model_keys)            \n",
    "        if satisfiable:\n",
    "            return satisfiable, Model, model_keys1\n",
    "        \n",
    "        #if we don't have any more unique unused literals and the algorithm couldn't find a model where all of \n",
    "        #the clauses are True, then it means that no such model exists and the KB is not satisfiable \n",
    "        return False, {}, []\n",
    "    \n",
    "    return DPLL(KB, list(KB), symbols, {}, model_keys)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note:** after implementing the DPLL algorithm and already passing all extension tests, I realized that I could have made an easier version of this code without the inclusion of the `Pass` symbol, although it was an easy way to understand how DPLL works. Similarly to how the new_clauses local variable updates, I could have passed as arguments for the clauses in the DPLL function the updated clauses already without the True clauses nor the discarded wrong sign literals. This would have shortened my code, but the result would have been the same. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "1a373b0f237fb333214a04ced058f50f",
     "grade": false,
     "grade_id": "cell-8c6248549aeaca88",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<h1>Question 3</h1>\n",
    "\n",
    "Implement your KB from Russell & Norvig in CNF by filling in the sets inside the list <code>KB</code> below.  Ensure that your KB is in a list of set format as stated in the assignment instructions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![pic](https://scontent.ftse2-1.fna.fbcdn.net/v/t1.15752-9/92442128_2637654039676658_501553876961329152_n.png?_nc_cat=106&_nc_sid=b96e70&_nc_eui2=AeHIGMJHDN3W48Ls_cgxCvgjjxDSt0dFdMZaxB_um5spgSyxjtqWngkRUIEZPYuWsNmDdYJGb_mNd6DSDmv4SCtFcyQTLymGzew1A8sXLAKSKg&_nc_ohc=N87QRYpjLKUAX8E9fxm&_nc_ht=scontent.ftse2-1.fna&oh=9f3d696fb717fe28278c8ffa31e4631d&oe=5EAC2F23&dl=1)\n",
    "\n",
    "Using the basic rules and transformations, we can transform the above sentences into CNF:\n",
    "\n",
    "$$S_1: ((\\neg A) \\lor (B \\lor E)) \\land ((\\neg B \\land \\neg E) \\lor A)=(\\neg A) \\lor B \\lor E) \\land (\\neg B \\lor A) \\land (\\neg E \\lor A)$$\n",
    "\n",
    "$$S_2: \\neg E \\lor D$$\n",
    "\n",
    "$$S_3: \\neg C \\lor \\neg F \\lor \\neg B$$\n",
    "\n",
    "$$S_4: \\neg E \\lor B$$\n",
    "\n",
    "$$S_5: \\neg B \\lor F$$\n",
    "\n",
    "$$S_6: \\neg B \\lor C$$\n",
    "\n",
    "The above sentences are all in CNF, so we can add them into the KB as such."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "a545c5a7e460e8a160a96549fba09556",
     "grade": false,
     "grade_id": "cell-2600ca4ae2649468",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{D: True, C: True, -B: False, -E: False, -A: False}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#defining all literals\n",
    "A = Literal('A')\n",
    "B = Literal('B')\n",
    "C = Literal('C')\n",
    "D = Literal('D')\n",
    "E = Literal('E')\n",
    "F = Literal('F')\n",
    "\n",
    "#defining KB\n",
    "KB = [{-A, B, E},{-B, A},{-E, A},\n",
    "      {-E, D},\n",
    "      {-C, -F, -B},\n",
    "      {-E, B},\n",
    "      {-B, F},\n",
    "      {-B, C}]\n",
    "\n",
    "#seeing whether the KB is satisfiable and has solutions\n",
    "satisfiable, model, keys = DPLL_Satisfiable(KB, 0)\n",
    "model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "755ed998a518249d48e3e3518ec2ed63",
     "grade": false,
     "grade_id": "cell-f24016ad18be5ed3",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<h1>Basic Functionality Tests</h1>\n",
    "\n",
    "All of the tests in this section must be passed for the code to be considered fully functional.  Other unseen test cases will be used after submission to further verify functionality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ea88980a283406b7789cd4f485dc3172",
     "grade": true,
     "grade_id": "cell-6af1cbc180046559",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# This section will test the correct definition of the literal class\n",
    "\n",
    "\n",
    "# Test the name attribute works correctly\n",
    "assert(A.name == 'A')\n",
    "\n",
    "# Test that negation works correctly\n",
    "assert(not (-C).sign)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9264e8da332b50a0adf2a1de4ec4a591",
     "grade": true,
     "grade_id": "cell-76b5f4949b4918a0",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# This section will test that the KB has been correctly converted to CNF by performing \n",
    "# tests over all possible models\n",
    "import itertools\n",
    "symbols = {A,B,C,D,E,F}\n",
    "symbol_list = [A,B,C,D,E,F]\n",
    "\n",
    "def evaluate_russell_norvig_KB(model):\n",
    "    # Manually evaluate the KB using the model\n",
    "    s = list()\n",
    "    s.append(model[A] == (model[B] or model[E]))\n",
    "    s.append(model[E] <= model[D])\n",
    "    s.append((model[C] and model[F]) <= (not model[B]))\n",
    "    s.append(model[E] <= model[B])\n",
    "    s.append(model[B] <= model[F])\n",
    "    s.append(model[B] <= model[C])\n",
    "    return all(s)\n",
    "\n",
    "def evaluate_KB(KB, model):\n",
    "    model_true = True\n",
    "    model_name_dict = {l.name: model[l] for l in model}\n",
    "    for clause in KB:\n",
    "        evaluation = {l.sign == model_name_dict[l.name] for l in clause if l.name in model_name_dict}\n",
    "        model_true = model_true and any(evaluation)\n",
    "    return model_true\n",
    "\n",
    "all_models = list(itertools.product([False, True], repeat=6))\n",
    "for i in range(0, len(all_models)):\n",
    "    # Test all truth values\n",
    "    test_model = {symbol_list[j]: all_models[i][j] for j in range(0,6)}\n",
    "    \n",
    "    # Test the model\n",
    "    assert(evaluate_russell_norvig_KB(test_model) == evaluate_KB(KB, test_model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "bd40af18e4e25d64cb61ca9425b25eeb",
     "grade": true,
     "grade_id": "cell-5007c88f303571cb",
     "locked": true,
     "points": 4,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# This section will test the basic working of DPLL\n",
    "# Satisfiable model\n",
    "test_KB = [{A, C},{-A, C}, {B, -C}]\n",
    "t, model, symbol_trace = DPLL_Satisfiable(test_KB)\n",
    "assert(evaluate_KB(test_KB, model))\n",
    "assert(t)\n",
    "\n",
    "# Unsatisfiable model\n",
    "test_KB = [{A, C},{-A, C}, {-C}]\n",
    "t, model, symbol_trace = DPLL_Satisfiable(test_KB)\n",
    "assert(not t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "5d93f38084e3ef0a6cf8b286f3e12054",
     "grade": true,
     "grade_id": "cell-63ce3735a6a8d49e",
     "locked": true,
     "points": 8,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{D: True, C: True, -B: False, -E: False, -A: False}\n"
     ]
    }
   ],
   "source": [
    "# This will test DPLL on the KB from Russell & Norvig\n",
    "t, model, symbol_trace = DPLL_Satisfiable(KB,0)\n",
    "print(model)\n",
    "\n",
    "# This model is satisfiable.  Test that it is so\n",
    "assert(t)\n",
    "\n",
    "# Check that the model found actually works\n",
    "assert(evaluate_KB(KB, model)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "197d7a486e328210a1d13c24747b3111",
     "grade": false,
     "grade_id": "cell-3e6849da5a8eba9a",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<h1>Extensions</h1>\n",
    "\n",
    "1. Implement the degree heuristic for choosing symbols.  If <code>heuristic_level=1</code>, then the degree heuristic should be used to select which symbol to assign.\n",
    "2. Implement the pure symbol and unit clause heuristics.  If <code>heuristic_level=2</code>, then these heuristics should be used to find select first a pure symbol, and if one is not found, then a unit clause.  If neither pure symbols nor unit clauses are found, then the degree heuristic should be used to select a symbol.  If there are multiple pure symbols or unit clauses found, then use alphabetical order to select amongst them.\n",
    "3. Modify the pure symbol heuristic to choose the pure symbol that occurs in the most number of clauses.  This should be activated if <code>heuristic_level=3</code>."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Degree Heuristic**:\n",
    "\n",
    "Below is the implementation of the degree heuristic, which basically finds the most common literal based on the list of available literals as well as the leftover clauses. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#the degree heuristic implemenetation\n",
    "\n",
    "def degree(symbols,clauses):\n",
    "    \n",
    "    \"\"\" This function returns the most common literal from the list of available literals \n",
    "    and the leftover clauses.\n",
    "    \n",
    "    Input:\n",
    "        -symbols: the list of symbols which were not already chosen (unique).\n",
    "        -clauses: the clauses list which is still not resolved given the model.\n",
    "        \n",
    "    Output:\n",
    "        -degree: the most common literal. \"\"\"\n",
    "    \n",
    "    #finds out how many times a literal has been present in the clauses\n",
    "    num_of_symbols = {}\n",
    "    for symbol in symbols:\n",
    "        for clause in clauses:\n",
    "            for literal in clause:\n",
    "                if literal == symbol:\n",
    "                    if literal in num_of_symbols:\n",
    "                        num_of_symbols[symbol] += 1\n",
    "                    else:\n",
    "                        num_of_symbols[symbol] = 1\n",
    "                        \n",
    "#     after I passed the first extension test, I realized that it was easier to\n",
    "#     sort the literals alphabetically if I just used their names as in the 2-3 extensions\n",
    "#     so below is an alternative code although it just gives the letter instead of a \n",
    "#     literal, which could be further fixed\n",
    "                    \n",
    "#     sorted_list = sorted(num_of_symbols, key=lambda item: num_of_symbols[item])\n",
    "#     return sorted(sorted_list, key=name_alph)\n",
    "    \n",
    "    #we want to return the most common literal and if there are multiple, then the \n",
    "    #literal alphabetically, which is why we sort first based on the value of the dictionary \n",
    "    #(i.e., number of appearances) and then alphabetically - the code above is an easier alternative\n",
    "    \n",
    "    change={}\n",
    "    new={}\n",
    "    for literals in num_of_symbols:\n",
    "        change[literals]=literals.name\n",
    "    for literal in num_of_symbols:\n",
    "        new[change[literal]]=num_of_symbols[literal]\n",
    "                \n",
    "    sorted_symbols = sorted(new, key=lambda x: (-new[x], x))\n",
    "    for i in range(len(sorted_symbols)):\n",
    "        sorted_symbols[i]=Literal(sorted_symbols[i])\n",
    "    \n",
    "    degree = [sorted_symbols[i] for i in range(len(sorted_symbols))][0]\n",
    "    return degree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Pure symbol + Unit clause**:\n",
    "\n",
    "Below is the implementation of the pure symbol and unit clause heuristics. A pure symbol is a symbol which appears with a consistent sign throughout the whole leftover KB. At the same time, a unit clause is a clause that consists of a single literal. For `heuristic_level=2` and `heuristic_level=3`, if there are multiple pure symbols or unit clauses, then it uses alphabetical order or commonness to choose a symbol, respectively. When there are no pure symbols or unit clauses, a symbol is chosen according to the degree heuristic.\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pure_unit(clauses,symbols,common=False):\n",
    "    \n",
    "    def name_alph(literal):\n",
    "        \"\"\"This function returns the name of the literal for sorting alphabetically.\"\"\"\n",
    "        return literal.name   \n",
    "    \n",
    "    \"\"\" This function implements the pure symbol and unit clause heuristics. If there are\n",
    "    multiple pure symbols or unit clauses, then it uses alphabetical order or commonness to choose a symbol.\n",
    "    When there are no pure symbols or unit clauses, a symbol is chosen according to the degree heuristic.\n",
    "    \n",
    "    Input:\n",
    "        -symbols: the list of symbols which were not already chosen (unique)\n",
    "        -clauses: the clauses list which is still not resolved given the model\n",
    "        \n",
    "    Output: suitable literal. \"\"\"  \n",
    "        \n",
    "    pure_unit_symbols = set()\n",
    "    \n",
    "    #getting all of the literals in the clauses into one big list\n",
    "    all_symbols=[]\n",
    "    for clause in clauses:\n",
    "        for literal in clause:\n",
    "            all_symbols.append(literal)\n",
    "      \n",
    "    #for all available literals, we scroll through the all_symbols to collect all instances of that literal;\n",
    "    #if the signs of those literals in the list are all the same, then we found a pure symbol - if not, then move further\n",
    "    for symbol in symbols:\n",
    "        signs = []\n",
    "        while symbol in all_symbols:\n",
    "            signs.append(all_symbols[all_symbols.index(symbol)])\n",
    "            all_symbols.remove(symbol)\n",
    "        if (all(x.sign==True for x in signs) or all(x.sign==False for x in signs)) and not len(signs)==0:\n",
    "            pure_unit_symbols.add(symbol)\n",
    "            \n",
    "    #for heuristic2: if we have multiple pure symbols, sort them alphabetically and choose the first one\n",
    "    #for heuristic3: if we have multiple pure symbols, choose the most common one\n",
    "    if len(pure_unit_symbols) > 0:\n",
    "        if len(pure_unit_symbols)==1:\n",
    "            return pure_unit_symbols.pop()\n",
    "        if common:\n",
    "            return degree(pure_unit_symbols, clauses)\n",
    "        return sorted(pure_unit_symbols, key=name_alph)[0]\n",
    "\n",
    "    #if we don't have any pure symbols, go for the unit clauses;\n",
    "    #since we were updating the clauses and discarding the wrong sign instances as well as discarding clauses \n",
    "    #which are already true, we will simply choose the clauses of length 1\n",
    "    if len(pure_unit_symbols) == 0:\n",
    "        for clause in clauses:\n",
    "            if len(clause) == 1:\n",
    "                pure_unit_symbols.add(clause.pop())\n",
    "    #for heuristic2: if we have multiple unit clauses, sort them alphabetically and choose the first one\n",
    "    #for heuristic3: if we have multiple unit clauses, choose the most common one\n",
    "    if len(pure_unit_symbols) > 0:\n",
    "        if common:\n",
    "            return degree(pure_unit_symbols, clauses)\n",
    "        return sorted(pure_unit_symbols, key=name_alph)[0]\n",
    "\n",
    "    #if no pure symbols or unit clauses, go for the degree heuristic\n",
    "    else:\n",
    "        return degree(symbols, clauses)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "f01239be43d1b96af4269b659140441a",
     "grade": false,
     "grade_id": "cell-d4a09c27c6cafd14",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "<h1>Extension Tests</h1>\n",
    "\n",
    "This section will test that the degree heuristic, pure symbol and unit clause heuristics are correctly implemented.  Note that in your code, the <code>heuristic_level</code> needs to correctly activate the heuristic being tested, and the <code>symbol_list</code> needs to be correctly generated "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "c22796e4310c481858d9941480d3abc2",
     "grade": true,
     "grade_id": "cell-782f68d63b7be51f",
     "locked": true,
     "points": 16,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{-B: False, -E: False, -A: False}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[B, A, C, F, E, A]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Degree Heuristic Test for KB from Russell & Norvig\n",
    "t, model, symbol_trace = DPLL_Satisfiable(KB,1)\n",
    "print(model)\n",
    "\n",
    "# This model is satisfiable.  Test that it is so\n",
    "assert(t)\n",
    "\n",
    "# Check that the model found actually works\n",
    "assert(evaluate_KB(KB, model))  \n",
    "\n",
    "# Test the symbol trace to ensure that the correct order is chosen\n",
    "assert([l.name for l in symbol_trace] in [['B','F', 'E', 'C', 'C', 'E', 'A'], ['B', 'A', 'C', 'F', 'E', 'A']])\n",
    "\n",
    "symbol_trace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note:** I came to OH and it turned out the answer key was different, so I changed it - the actual locked cell is in the bottom of the assignment. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{D: True, -B: False, -E: False, -A: False}\n"
     ]
    }
   ],
   "source": [
    "# Pure Symbol & Unit Clause Heuristic Test for KB from Russell & Norvig\n",
    "t, model, symbol_trace = DPLL_Satisfiable(KB,2)\n",
    "print(model)\n",
    "\n",
    "\n",
    "# This model is satisfiable.  Test that it is so\n",
    "assert(t)\n",
    "\n",
    "# Check that the model found actually works\n",
    "assert(evaluate_KB(KB, model))\n",
    "\n",
    "# Test the symbol trace to ensure that the correct order is chosen\n",
    "assert([l.name for l in symbol_trace] == ['D', 'B', 'A', 'C', 'F', 'E', 'A'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "01a5632a5bf35a1a3a9c8202f7c79b53",
     "grade": true,
     "grade_id": "cell-b9ce4afcdb630096",
     "locked": true,
     "points": 64,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{D: True, -B: False, -E: False, -A: False}\n",
      "[D, B, A, C, -F, E, -A]\n"
     ]
    }
   ],
   "source": [
    "# Pure Symbol & Unit Clause Heuristic Test, choosing the most-frequently used pure symbol, for KB from Russell & Norvig\n",
    "t, model, symbol_trace = DPLL_Satisfiable(KB,3)\n",
    "print(model)\n",
    "print(symbol_trace)\n",
    "\n",
    "# This model is satisfiable.  Test that it is so\n",
    "assert(t)\n",
    "\n",
    "# Check that the model found actually works\n",
    "assert(evaluate_KB(KB, model))\n",
    "\n",
    "# Test the symbol trace to ensure that the correct order is chosen\n",
    "assert([l.name for l in symbol_trace] == ['D', 'B', 'A', 'C', 'F', 'E', 'A'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "0257a3a8ed46849441e37da29fdce593",
     "grade": true,
     "grade_id": "cell-1849b5bca210fac7",
     "locked": true,
     "points": 32,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Pure Symbol & Unit Clause Heuristic Test for KB from Russell & Norvig\n",
    "t, model, symbol_trace = DPLL_Satisfiable(KB,2)\n",
    "print(model)\n",
    "\n",
    "\n",
    "# This model is satisfiable.  Test that it is so\n",
    "assert(t)\n",
    "\n",
    "# Check that the model found actually works\n",
    "assert(evaluate_KB(KB, model))\n",
    "\n",
    "# Test the symbol trace to ensure that the correct order is chosen\n",
    "assert([l.name for l in symbol_trace] == ['D', 'B', 'E', 'A', 'C', 'F', 'E', 'A'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
